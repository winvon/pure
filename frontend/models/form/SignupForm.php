<?php
/**
 * Author: lf
 * Blog: https://blog.feehi.com
 * Email: job@feehi.com
 * Created at: 2017-03-15 21:16
 */

namespace frontend\models\form;

use yii;
use common\models\User;
use yii\base\Model;

/**
 * Signup form
 */
class SignupForm extends Model
{

    public $username;

    public $email;

    public $code;

    public $telephone;

    public $password;

    public $district;


    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            ['username', 'filter', 'filter' => 'trim'],
            ['username', 'required'],
            [
                'username',
                'unique',
                'targetClass' => User::className(),
                'message' => yii::t('frontend', 'This username has already been taken')
            ],
            ['username', 'string', 'min' => 2, 'max' => 255],
            ['email', 'filter', 'filter' => 'trim'],
            ['email', 'email'],
            ['email', 'string', 'max' => 255],
            [
                'email',
                'unique',
                'targetClass' => User::className(),
                'message' => yii::t('frontend', 'This email address has already been taken')
            ],
            ['telephone', 'filter', 'filter' => 'trim'],
            ['telephone', 'required'],
//            ['telephone', 'match', 'pattern' => '/^[1][34578][0-9]{9}$/'],
            ['telephone', 'string', 'max' => 20],
            [
                'telephone',
                'unique',
                'targetClass' => User::className(),
                'message' => yii::t('frontend', 'This telephone address has already been taken')
            ],
            ['code', 'required'],
            [['code', 'password', 'telephone'], 'required', 'on' => 'forget-password'],
            ['password', 'required'],
            ['password', 'string', 'min' => 6],
            ['code', 'checkCode'],
            ['district', 'string', 'max' => 128],
        ];
    }

    public function scenarios()
    {
        return array_merge(parent::scenarios(), [
            'forget-password' => ['telephone', 'code', 'password'],
        ]); // TODO: Change the autogenerated stub
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'username' => yii::t('app', 'Username'),
            'email' => yii::t('app', 'Email'),
            'telephone' => yii::t('app', 'Telephone'),
            'code' => yii::t('app', 'Telephone Code'),
            'old_password' => yii::t('app', 'Old Password'),
            'password' => yii::t('app', 'Password'),
            'repassword' => yii::t('app', 'Repeat Password'),
            'avatar' => yii::t('app', 'Avatar'),
            'created_at' => yii::t('app', 'Created At'),
            'updated_at' => yii::t('app', 'Updated At'),
            'rememberMe' => yii::t('frontend', 'Remember Me'),
        ];
    }

    public function checkCode($attribute)
    {
        if (!$this->hasErrors()) {
            $cache = Yii::$app->cache;
            if ($cache->get($this->telephone) != $this->code) {
                $this->addError($attribute, yii::t('app', '验证码错误'));
            }
        }
    }

    public function validated(){
        $data = Yii::$app->request->post();
        if ($data['SignupForm']['telephone'] == '') {
            $this->addError('telephone', '手机号码不能为空');
            return false;
        }
        $user = User::findOne(['telephone' => $data['SignupForm']['telephone']]);
        if ($user == null) {
            $this->addError('telephone', '手机号码未注册');
            return false;
        }
        $cache = Yii::$app->cache;
        if ($cache->get($this->telephone) != $this->code) {
            $this->addError('code', yii::t('app', '验证码错误'));
            return false;
        }
        return true;
    }

    /**
     * Signs user up.
     *
     * @return User|null the saved model or null if saving fails
     */
    public function signup()
    {
        if (!$this->validate()) {
            return null;
        }
        $user = new User();
        $user->username = $this->username;
        $user->telephone = $this->telephone;
        $user->district = Yii::$app->cache->get($user->telephone . 'district');
        $user->setPassword($this->password);
        $user->generateAuthKey();
        return $user->save() ? $user : null;
    }
}
